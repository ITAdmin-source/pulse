{
  "permissions": {
    "allow": [
      "WebFetch(domain:github.com)",
      "Bash(npm run lint)",
      "Bash(find:*)",
      "Bash(dir C:UsersGuyDownloadsProjectspulse)",
      "Bash(cat:*)",
      "Bash(npm test)",
      "Bash(rm:*)",
      "Bash(npm cache clean:*)",
      "Bash(tasklist)",
      "Bash(findstr:*)",
      "Bash(taskkill:*)",
      "Bash(netstat:*)",
      "Bash(powershell:*)",
      "WebSearch",
      "WebFetch(domain:clerk.com)",
      "Bash(npx drizzle-kit generate:*)",
      "Bash(dir:*)",
      "Bash(curl:*)",
      "Bash(nslookup:*)",
      "Bash(ping:*)",
      "Bash(node:*)",
      "Bash(npm install:*)",
      "Bash(npx tsx:*)",
      "Bash(sed:*)",
      "Bash(for file in components/admin/user-details-modal.tsx components/analytics/*.tsx components/polls/anonymous-insight-handler.tsx components/shared/results-dashboard.tsx components/voting/shuffle-intro.tsx)",
      "Bash(do [ -f \"$file\" ])",
      "Bash(done)",
      "Bash(npm test:*)",
      "Bash(npm run build:*)",
      "Bash(git add:*)",
      "Bash(del libutilsoffline-queue.ts)",
      "Bash(npx drizzle-kit push)",
      "Bash(if not exist testsintegrationworkflows mkdir testsintegrationworkflows)",
      "Bash(if not exist .claudedocs mkdir .claudedocs)",
      "Bash(if not exist libclustering mkdir libclustering)",
      "Bash(if not exist apppolls[slug]opinionmap mkdir apppolls[slug]opinionmap)",
      "Read(//c/Users/Guy/Downloads/**)",
      "Bash(git commit:*)",
      "Bash(git checkout:*)",
      "Bash(git pull:*)",
      "Bash(git merge:*)",
      "Bash(git push:*)",
      "Bash(tsx scripts/check-clustering-costliving.ts:*)",
      "WebFetch(domain:www.e-revistes.uji.es)",
      "WebFetch(domain:compdemocracy.org)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(if not exist componentsadmin mkdir componentsadmin)",
      "WebFetch(domain:arxiv.org)",
      "Bash(npm run db:health:*)",
      "Bash(git log:*)"
    ],
    "deny": [],
    "ask": [
      "Bash(npm run dev:*)",
      "Bash(npm run test:*)",
      "Bash(npm run test:coverage:*)",
      "Bash(npm run test:ui:*)",
      "Bash(npm run test:e2e:*)",
      "Bash(npm run test:quick:*)",
      "Bash(npm run test:integration:*)",
      "Bash(npm run test:all:*)",
      "Bash(npm run db:generate:*)",
      "Bash(npm run db:migrate:*)",
      "Bash(npm run db:seed:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run test:*)"
    ]
  }
}
